//
// AccessTokenAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

let appGrantType = "client_credentials"
let userGrantType = "password"

/// Keys for service
let clientIdKey = "client_id"
let clientSecretkey = "client_secret"
let grantTypeKey = "grant_type"
let userNameKey = "username"
let passwordKey = "password"

// swiftlint:disable function_parameter_count
protocol AccessTokenAPI {

}
extension AccessTokenAPI {
    /**
     - parameter clientId: (form) Client ID for oath.
     - parameter clientSecret: (form) Client Secret for oath.
     - parameter grantType: (form) Grant Type for oath.
     - parameter username: (form) User Name for oath.
     - parameter password: (form) Password for oath.
     - parameter handler: completion handler to receive the data
     */
    func getToken(withHandler handler: @escaping (_ responseData: AccessToken?) -> Void) {
        let path = "/o/token/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeadersToken
        var nillableParameters: [String:Any?] = [:]
        nillableParameters[grantTypeKey] = Configuration.grantType()
        nillableParameters[userNameKey] = Configuration.userName().encodeToJSON()
        nillableParameters[passwordKey] = Configuration.userPassowrd().encodeToJSON()
        nillableParameters[clientIdKey] = Configuration.clientId().encodeToJSON()
        nillableParameters[clientSecretkey] = Configuration.clientSecret().encodeToJSON()

        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestEncoding: URLEncoding.default, requestHeaders: headers, showLoader: false)
        JSONRequest(requestBuilder: requestBuilder) { (response, _) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(nil)
                    return
                }
                let accessToken = AccessToken(JSON: jsonResponse)
                handler(accessToken)
            } else {
                handler(nil)
            }
        }
    }
}
