//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

// swiftlint:disable function_parameter_count
protocol UserAPI {

}
extension UserAPI {
    /**
     Cahnge password
     - parameter body: (body) old and new password
     - parameter handler: completion handler to receive the data
     */
    func changePassword(_ body: Password, withHandler handler: @escaping (_ responseData: NSIResponse<Any>?) -> Void) {
        let path = "/users/change-password/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<Any>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<Any>(.invalidStatus))
            }
        }
    }
    /**
     Forgot paaasword
     - parameter body: (body) email address
     - parameter handler: completion handler to receive the data
     */
    func forgotPassword(_ body: User, withHandler handler: @escaping (_ responseData: NSIResponse<Any>?) -> Void) {
        let path = "/users/forgot-password/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<Any>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<Any>(.invalidStatus))
            }
        }
    }
    /**
     User Login
     - parameter body: (body) email address, password
     - parameter handler: completion handler to receive the data
     */
    func signIn(_ body: User, withHandler handler: @escaping (_ responseData: NSIResponse<UserModel>?) -> Void) {
        let path = "/users/signin/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<UserModel>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<UserModel>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<UserModel>(.invalidStatus))
            }
        }
    }
    /**
     User SignUp
     - parameter body: (body) email address, password,deviceType and deviceToken of user
     - parameter handler: completion handler to receive the data
     */
    func signUp(_ body: User, withHandler handler: @escaping (_ responseData: NSIResponse<UserModel>?) -> Void) {
        let path = "/users/signup/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<UserModel>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<UserModel>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<UserModel>(.invalidStatus))
            }
        }
    }
    /**
     Otp verification
     - parameter body: (body) email address
     - parameter handler: completion handler to receive the data
     */
    func verifyEmail(_ body: EmailToken, withHandler handler: @escaping (_ responseData: NSIResponse<Any>?) -> Void) {
        let path = "/users/email-otp/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<Any>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<Any>(.invalidStatus))
            }
        }
    }
    /**
     Otp verify
     - parameter body: (body) email address and otp
     - parameter handler: completion handler to receive the data
     */
    func verifyOtp(_ body: EmailToken, withHandler handler: @escaping (_ responseData: NSIResponse<Any>?) -> Void) {
        let path = "/users/verify-otp/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<Any>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<Any>(.invalidStatus))
            }
        }
    }
    /**
     Log out
     - parameter handler: completion handler to receive the data
     */
    func signOut(withHandler handler: @escaping (_ responseData: NSIResponse<Any>?) -> Void) {
        let path = "/users/signout/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let nillableParameters: [String:Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "PUT", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<Any>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<Any>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<Any>(.invalidStatus))
            }
        }
    }
    /**
     Terms of service
     - parameter pageId: (path) page id
     - parameter handler: completion handler to receive the data
     */
    func termsOfService(_ termsPage: String, withHandler handler: @escaping (_ responseData: NSIResponse<StaticPage>?) -> Void) {
        var path = "/app/staticpage/{termsPage}/"

        path = path.replacingOccurrences(of: "{termsPage}", with: "\(termsPage)", options: .literal, range: nil)
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let nillableParameters: [String:Any?] = [:]
        let parameters = APIHelper.rejectNil(source: nillableParameters)
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "GET", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<StaticPage>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<StaticPage>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<StaticPage>(.invalidStatus))
            }
        }
    }
    /**
     User Update his profile
     - parameter body: (body) email address, password,deviceType and deviceToken of user
     - parameter handler: completion handler to receive the data
     */
    func updateProfile(_ body: User, withHandler handler: @escaping (_ responseData: NSIResponse<User>?) -> Void) {
        let path = "/users/update/"
        let URLString = Configuration.BaseURL() + path
        let headers = Configuration.customHeaders
        let parameters = body.encodeToJSON()
        let convertedParameters = APIHelper.convertBoolToString(source: parameters)
        let requestBuilder = RequestBuilder(urlString: URLString, requestMethod: "POST", requestParameters: convertedParameters, requestHeaders: headers, showLoader: true)
        JSONRequest(requestBuilder: requestBuilder) { (response, isLoadedFromCache) in
            if response.result.isSuccess {
                guard let jsonResponse = response.result.value as? [String: AnyObject] else {
                    handler(NSIResponse<User>(.nilResponse))
                    return
                }
                var nsiResponse = NSIResponse<User>(JSON: jsonResponse)
                nsiResponse?.hasCache = isLoadedFromCache
                handler(nsiResponse)
            } else {
                handler(NSIResponse<User>(.invalidStatus))
            }
        }
    }
}
