// Extensions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

extension Bool: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Float: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Int: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Int32: JSONEncodable {
    func encodeToJSON() -> Any { return NSNumber(value: self) }
}

extension Int64: JSONEncodable {
    func encodeToJSON() -> Any { return NSNumber(value: self) }
}

extension Double: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension String: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

private func encodeIfPossible<T>(object: T) -> Any {
    if object is JSONEncodable {
        return ((object as? JSONEncodable)!).encodeToJSON()
    } else {
        return object
    }
}

extension Array: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.map(encodeIfPossible)
    }
}

extension Dictionary: JSONEncodable {
    func encodeToJSON() -> Any {
        var dictionary = [String: Any]()
        for (key, value) in self {
            if let aKey = key as? String {
                dictionary[aKey] = encodeIfPossible(object: value)
            }
        }
        return dictionary
    }
}

extension NSData: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.base64EncodedString(options: NSData.Base64EncodingOptions())
    }
}

private let dateFormatter: DateFormatter = {
    let fmt = DateFormatter()
    fmt.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
    fmt.locale = NSLocale(localeIdentifier: "en_US_POSIX") as Locale!
    return fmt
}()

extension Date: JSONEncodable {
    func encodeToJSON() -> Any {
        return dateFormatter.string(from: self)
    }
}

extension NSUUID: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.uuidString
    }
}
